// Вопросы: 
// №1
// это сущность которая может взаимодействовать с другими обьектами и выполнять
// действия и изменять свое состояние

// №2
// Это экземпляр класса, при созданий обьекта он имеет доступ к свойствам и методам класса

// №3
// 1)свойства 
// 2)методы
// 3)Идентичность
// 4)Конструктор

// №4
// это значения его свойств , которые описываются и изменяются в классе через переменные.
// class Car {
//   String model;
//   int year;

//   Car(this.model, this.year);
// }

// №5
// это действия, которые он может выполнять, реализуемые в классе через методы.

// №6
// инкапсуляция, наследования, полиморфизма и абстракция

// №7
// с помощью слова class , за которым следует имя и тело класса содержащее поля, методы и конструкторы

// №8
// это обьект созданный на основе класса , который имеет свои собственные значения и может использовать методы класса

// №9
// конструктор класса инициалезирует обьекты , задавая начальные значения их свойствам. Он обьявляется с именем класса и может принимать параметры

// №10
// 1)Основной конструктор
// 2)Именованный конструктор
// 3)Фабричный конструктор
// 4)Конструктор по умолчанию

// №11
// Перегрузка оператора позволяет определить собственное поведение стандартных операторов (например, `+`, `-`, `*`)
// для пользовательских типов данных, чтобы сделать операции с ними более интуитивно понятными.

// №12
// Статические переменные и методы класса обьявляются с ключевым словом static и используются для общего доступа к данным
// или функциям класса

// №13
// в Dart множественное наследование не поддерживается; используется ключевое слово "extends" для наследования от 
// базового класса

// №14
// Методы базового класса переопределяются в произодном классе для изменения или расширения их 
// поведения , используя ключевое слово "@override" перед методом

// №15
// Абстрактный класс содержит как абстрактные, так и реализованные методы и не может быть создан напрямую.
// Интерфейс определяет только методы без реализации и может быть реализован несколькими классами.

// №16
// "public" доступен везде ,private(с подверкиванием) доступен только внутри библиотеки


class Student {
  String name;
  int age;

  Student(this.name, this.age);

  void study() {
    print("$name учиться");
  } 

  void rest() {
    print("$name отдыхает");
  }
}

void main() {
  var student = Student("Адильбек", 18);

  student.study();
  student.rest();
}




abstract class Vehicle {
  void move();
}

class Car extends Vehicle {
  @override
  void move() {
    print("Машина едет по дороге");
  }
}

class Bicycle extends Vehicle { 
  @override 
  void move() {
    print("Велосипед едет по велодорожке");
  }
}

void main () { 
  Vehicle myCar = Car();
  Vehicle myBicycle = Bicycle();

  myCar.move();
  myBicycle.move();
}






































class Student1 {
  String name;
  int age;


  Student1(this.name, this.age);

  void study() {
    print("$name учиться");
  }

  void rest1() {
    print("$name отдыхает");
  }
}

void main1() {
  var student = Student("Адильбек", 18);

  student.study();
  student.rest();
}




